syntax = "proto3";

package common;
option go_package = "proto-go/common";

// Envelope wraps a Payload with a signature so that the message may be authenticated
// <REQUEST,o,t,c>
// Request
message Envelope {
    // A marshaled Payload
    bytes payload = 1;

    // A signature by the creator specified in the Payload header
    bytes signature = 2;

    int64 timestamp = 3;
    string clientAddr=4;
}

// This is finalized block structure to be shared among the orderer and peer
// Note that the BlockHeader chains to the previous BlockHeader, and the BlockData hash is embedded
// in the BlockHeader.  This makes it natural and obvious that the Data is included in the hash, but
// the Metadata is not.
//<<PRE-PREPARE,v,n,d>,m>
//PrePrepare
message Block {
    BlockHeader header = 1;
    BlockData data = 2;
}

// BlockHeader is the element of the block which forms the block chain
// The block header is hashed using the configured chain hashing algorithm
// over the ASN.1 encoding of the BlockHeader
message BlockHeader {
    repeated bytes previous_hash = 1; // The hash of the previous block header
    bytes data_hash = 2; // The hash of the BlockData, by MerkleTree
}

message BlockData {
    repeated bytes data = 1;
}

message PrePrepareMsg {
    Block block = 1;
    //digest is the blockheader hash
    string digest = 2;
    bytes sign =3;
}

message PrepareMsg {
    string digest = 1;
    bytes sign =2;
    string nodeID = 3;
}

message CommitMsg {
    string digest = 1;
    bytes sign =2;
    string nodeID = 3;
}

message Response {
    bool resCode =1;
}

service SendEnvelops {
    rpc Request(stream Envelope) returns (stream Response) {}
}

service Pbft {
    rpc HandlePrePrepare(PrePrepareMsg) returns (Response) {}
    rpc HandlePrepare(PrepareMsg) returns (Response) {}
    rpc HandleCommit(CommitMsg) returns (Response) {}
}